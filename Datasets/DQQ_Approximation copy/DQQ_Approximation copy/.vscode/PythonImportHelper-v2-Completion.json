[
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "MultipleLocator",
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "isExtraImport": true,
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "MultipleLocator",
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "isExtraImport": true,
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "matplotlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib",
        "description": "matplotlib",
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "heapq",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "heapq",
        "description": "heapq",
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "font_family_aliases",
        "importPath": "matplotlib.font_manager",
        "description": "matplotlib.font_manager",
        "isExtraImport": true,
        "detail": "matplotlib.font_manager",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "a_1",
        "kind": 5,
        "importPath": "illustration_plot.fig.plot_curves_0",
        "description": "illustration_plot.fig.plot_curves_0",
        "peekOfCode": "a_1 = 1\nb_1 = -300\nc_1 = 20000\nd_1 = 50\na_2 = -0.1\nb_2 = d_1\nx = np.array(range(300))\nmu_t = ((a_1 * x**3 + b_1 * x**2 + c_1 * x )/10000 + d_1) / 100\nlambda_t = (a_2 * x + b_2) / 100\ndelta = list(abs(mu_t-lambda_t))",
        "detail": "illustration_plot.fig.plot_curves_0",
        "documentation": {}
    },
    {
        "label": "b_1",
        "kind": 5,
        "importPath": "illustration_plot.fig.plot_curves_0",
        "description": "illustration_plot.fig.plot_curves_0",
        "peekOfCode": "b_1 = -300\nc_1 = 20000\nd_1 = 50\na_2 = -0.1\nb_2 = d_1\nx = np.array(range(300))\nmu_t = ((a_1 * x**3 + b_1 * x**2 + c_1 * x )/10000 + d_1) / 100\nlambda_t = (a_2 * x + b_2) / 100\ndelta = list(abs(mu_t-lambda_t))\ncrosses = list(map(delta.index, heapq.nsmallest(3, delta)))",
        "detail": "illustration_plot.fig.plot_curves_0",
        "documentation": {}
    },
    {
        "label": "c_1",
        "kind": 5,
        "importPath": "illustration_plot.fig.plot_curves_0",
        "description": "illustration_plot.fig.plot_curves_0",
        "peekOfCode": "c_1 = 20000\nd_1 = 50\na_2 = -0.1\nb_2 = d_1\nx = np.array(range(300))\nmu_t = ((a_1 * x**3 + b_1 * x**2 + c_1 * x )/10000 + d_1) / 100\nlambda_t = (a_2 * x + b_2) / 100\ndelta = list(abs(mu_t-lambda_t))\ncrosses = list(map(delta.index, heapq.nsmallest(3, delta)))\n# For level",
        "detail": "illustration_plot.fig.plot_curves_0",
        "documentation": {}
    },
    {
        "label": "d_1",
        "kind": 5,
        "importPath": "illustration_plot.fig.plot_curves_0",
        "description": "illustration_plot.fig.plot_curves_0",
        "peekOfCode": "d_1 = 50\na_2 = -0.1\nb_2 = d_1\nx = np.array(range(300))\nmu_t = ((a_1 * x**3 + b_1 * x**2 + c_1 * x )/10000 + d_1) / 100\nlambda_t = (a_2 * x + b_2) / 100\ndelta = list(abs(mu_t-lambda_t))\ncrosses = list(map(delta.index, heapq.nsmallest(3, delta)))\n# For level\n# lambda_t = np.ones(len(x)) * (b_2 / 100)",
        "detail": "illustration_plot.fig.plot_curves_0",
        "documentation": {}
    },
    {
        "label": "a_2",
        "kind": 5,
        "importPath": "illustration_plot.fig.plot_curves_0",
        "description": "illustration_plot.fig.plot_curves_0",
        "peekOfCode": "a_2 = -0.1\nb_2 = d_1\nx = np.array(range(300))\nmu_t = ((a_1 * x**3 + b_1 * x**2 + c_1 * x )/10000 + d_1) / 100\nlambda_t = (a_2 * x + b_2) / 100\ndelta = list(abs(mu_t-lambda_t))\ncrosses = list(map(delta.index, heapq.nsmallest(3, delta)))\n# For level\n# lambda_t = np.ones(len(x)) * (b_2 / 100)\n# crosses.append(200)",
        "detail": "illustration_plot.fig.plot_curves_0",
        "documentation": {}
    },
    {
        "label": "b_2",
        "kind": 5,
        "importPath": "illustration_plot.fig.plot_curves_0",
        "description": "illustration_plot.fig.plot_curves_0",
        "peekOfCode": "b_2 = d_1\nx = np.array(range(300))\nmu_t = ((a_1 * x**3 + b_1 * x**2 + c_1 * x )/10000 + d_1) / 100\nlambda_t = (a_2 * x + b_2) / 100\ndelta = list(abs(mu_t-lambda_t))\ncrosses = list(map(delta.index, heapq.nsmallest(3, delta)))\n# For level\n# lambda_t = np.ones(len(x)) * (b_2 / 100)\n# crosses.append(200)\neqb = lambda_t[max(crosses)]",
        "detail": "illustration_plot.fig.plot_curves_0",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "illustration_plot.fig.plot_curves_0",
        "description": "illustration_plot.fig.plot_curves_0",
        "peekOfCode": "x = np.array(range(300))\nmu_t = ((a_1 * x**3 + b_1 * x**2 + c_1 * x )/10000 + d_1) / 100\nlambda_t = (a_2 * x + b_2) / 100\ndelta = list(abs(mu_t-lambda_t))\ncrosses = list(map(delta.index, heapq.nsmallest(3, delta)))\n# For level\n# lambda_t = np.ones(len(x)) * (b_2 / 100)\n# crosses.append(200)\neqb = lambda_t[max(crosses)]\nfor i in range(max(crosses), len(x)):",
        "detail": "illustration_plot.fig.plot_curves_0",
        "documentation": {}
    },
    {
        "label": "mu_t",
        "kind": 5,
        "importPath": "illustration_plot.fig.plot_curves_0",
        "description": "illustration_plot.fig.plot_curves_0",
        "peekOfCode": "mu_t = ((a_1 * x**3 + b_1 * x**2 + c_1 * x )/10000 + d_1) / 100\nlambda_t = (a_2 * x + b_2) / 100\ndelta = list(abs(mu_t-lambda_t))\ncrosses = list(map(delta.index, heapq.nsmallest(3, delta)))\n# For level\n# lambda_t = np.ones(len(x)) * (b_2 / 100)\n# crosses.append(200)\neqb = lambda_t[max(crosses)]\nfor i in range(max(crosses), len(x)):\n    lambda_t[i] = eqb",
        "detail": "illustration_plot.fig.plot_curves_0",
        "documentation": {}
    },
    {
        "label": "lambda_t",
        "kind": 5,
        "importPath": "illustration_plot.fig.plot_curves_0",
        "description": "illustration_plot.fig.plot_curves_0",
        "peekOfCode": "lambda_t = (a_2 * x + b_2) / 100\ndelta = list(abs(mu_t-lambda_t))\ncrosses = list(map(delta.index, heapq.nsmallest(3, delta)))\n# For level\n# lambda_t = np.ones(len(x)) * (b_2 / 100)\n# crosses.append(200)\neqb = lambda_t[max(crosses)]\nfor i in range(max(crosses), len(x)):\n    lambda_t[i] = eqb\n    mu_t[i] = eqb",
        "detail": "illustration_plot.fig.plot_curves_0",
        "documentation": {}
    },
    {
        "label": "delta",
        "kind": 5,
        "importPath": "illustration_plot.fig.plot_curves_0",
        "description": "illustration_plot.fig.plot_curves_0",
        "peekOfCode": "delta = list(abs(mu_t-lambda_t))\ncrosses = list(map(delta.index, heapq.nsmallest(3, delta)))\n# For level\n# lambda_t = np.ones(len(x)) * (b_2 / 100)\n# crosses.append(200)\neqb = lambda_t[max(crosses)]\nfor i in range(max(crosses), len(x)):\n    lambda_t[i] = eqb\n    mu_t[i] = eqb\nplt.axis('off')",
        "detail": "illustration_plot.fig.plot_curves_0",
        "documentation": {}
    },
    {
        "label": "crosses",
        "kind": 5,
        "importPath": "illustration_plot.fig.plot_curves_0",
        "description": "illustration_plot.fig.plot_curves_0",
        "peekOfCode": "crosses = list(map(delta.index, heapq.nsmallest(3, delta)))\n# For level\n# lambda_t = np.ones(len(x)) * (b_2 / 100)\n# crosses.append(200)\neqb = lambda_t[max(crosses)]\nfor i in range(max(crosses), len(x)):\n    lambda_t[i] = eqb\n    mu_t[i] = eqb\nplt.axis('off')\nplt.figure(figsize=(12, 8))",
        "detail": "illustration_plot.fig.plot_curves_0",
        "documentation": {}
    },
    {
        "label": "eqb",
        "kind": 5,
        "importPath": "illustration_plot.fig.plot_curves_0",
        "description": "illustration_plot.fig.plot_curves_0",
        "peekOfCode": "eqb = lambda_t[max(crosses)]\nfor i in range(max(crosses), len(x)):\n    lambda_t[i] = eqb\n    mu_t[i] = eqb\nplt.axis('off')\nplt.figure(figsize=(12, 8))\nplt.plot(x, mu_t, label='mu(t)', color='r', linewidth=2.5)\nplt.plot(x, lambda_t, label='lambda(t)', color='b', linewidth=2.5)\nplt.xlim([0, max(crosses)])\n# plt.ylim([0, 40])",
        "detail": "illustration_plot.fig.plot_curves_0",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "illustration_plot.fig.plot_curves_0",
        "description": "illustration_plot.fig.plot_curves_0",
        "peekOfCode": "ax = plt.gca()\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['bottom'].set_visible(False)\nax.spines['left'].set_visible(False)\n# plt.legend()\nplt.xticks([])\nplt.yticks([])\nplt.savefig('fig/mu_lambda.png', dpi=200, transparent=True)\nplt.close()",
        "detail": "illustration_plot.fig.plot_curves_0",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "illustration_plot.fig.plot_curves_0",
        "description": "illustration_plot.fig.plot_curves_0",
        "peekOfCode": "ax = plt.gca()\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['bottom'].set_visible(False)\nax.spines['left'].set_visible(False)\nplt.savefig('fig/cumsum.png', dpi=200, transparent=True)\nplt.close()\nplt.axis('off')\nplt.figure(figsize=(12, 8))\nplt.plot(x, np.cumsum(lambda_t) - np.cumsum(mu_t), label='Q(t)', color='orange', linewidth=2.5)",
        "detail": "illustration_plot.fig.plot_curves_0",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "illustration_plot.fig.plot_curves_0",
        "description": "illustration_plot.fig.plot_curves_0",
        "peekOfCode": "ax = plt.gca()\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['bottom'].set_visible(False)\nax.spines['left'].set_visible(False)\nplt.savefig('fig/Q.png', dpi=200, transparent=True)\nplt.close()",
        "detail": "illustration_plot.fig.plot_curves_0",
        "documentation": {}
    },
    {
        "label": "a_1",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_0",
        "description": "illustration_plot.plot_curves_0",
        "peekOfCode": "a_1 = 1\nb_1 = -300\nc_1 = 20000\nd_1 = 50\na_2 = -0.1\nb_2 = d_1\nx = np.array(range(300))\nmu_t = ((a_1 * x**3 + b_1 * x**2 + c_1 * x )/10000 + d_1) / 100\nlambda_t = (a_2 * x + b_2) / 100\ndelta = list(abs(mu_t-lambda_t))",
        "detail": "illustration_plot.plot_curves_0",
        "documentation": {}
    },
    {
        "label": "b_1",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_0",
        "description": "illustration_plot.plot_curves_0",
        "peekOfCode": "b_1 = -300\nc_1 = 20000\nd_1 = 50\na_2 = -0.1\nb_2 = d_1\nx = np.array(range(300))\nmu_t = ((a_1 * x**3 + b_1 * x**2 + c_1 * x )/10000 + d_1) / 100\nlambda_t = (a_2 * x + b_2) / 100\ndelta = list(abs(mu_t-lambda_t))\ncrosses = list(map(delta.index, heapq.nsmallest(3, delta)))",
        "detail": "illustration_plot.plot_curves_0",
        "documentation": {}
    },
    {
        "label": "c_1",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_0",
        "description": "illustration_plot.plot_curves_0",
        "peekOfCode": "c_1 = 20000\nd_1 = 50\na_2 = -0.1\nb_2 = d_1\nx = np.array(range(300))\nmu_t = ((a_1 * x**3 + b_1 * x**2 + c_1 * x )/10000 + d_1) / 100\nlambda_t = (a_2 * x + b_2) / 100\ndelta = list(abs(mu_t-lambda_t))\ncrosses = list(map(delta.index, heapq.nsmallest(3, delta)))\n# For level",
        "detail": "illustration_plot.plot_curves_0",
        "documentation": {}
    },
    {
        "label": "d_1",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_0",
        "description": "illustration_plot.plot_curves_0",
        "peekOfCode": "d_1 = 50\na_2 = -0.1\nb_2 = d_1\nx = np.array(range(300))\nmu_t = ((a_1 * x**3 + b_1 * x**2 + c_1 * x )/10000 + d_1) / 100\nlambda_t = (a_2 * x + b_2) / 100\ndelta = list(abs(mu_t-lambda_t))\ncrosses = list(map(delta.index, heapq.nsmallest(3, delta)))\n# For level\n# lambda_t = np.ones(len(x)) * (b_2 / 100)",
        "detail": "illustration_plot.plot_curves_0",
        "documentation": {}
    },
    {
        "label": "a_2",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_0",
        "description": "illustration_plot.plot_curves_0",
        "peekOfCode": "a_2 = -0.1\nb_2 = d_1\nx = np.array(range(300))\nmu_t = ((a_1 * x**3 + b_1 * x**2 + c_1 * x )/10000 + d_1) / 100\nlambda_t = (a_2 * x + b_2) / 100\ndelta = list(abs(mu_t-lambda_t))\ncrosses = list(map(delta.index, heapq.nsmallest(3, delta)))\n# For level\n# lambda_t = np.ones(len(x)) * (b_2 / 100)\n# crosses.append(200)",
        "detail": "illustration_plot.plot_curves_0",
        "documentation": {}
    },
    {
        "label": "b_2",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_0",
        "description": "illustration_plot.plot_curves_0",
        "peekOfCode": "b_2 = d_1\nx = np.array(range(300))\nmu_t = ((a_1 * x**3 + b_1 * x**2 + c_1 * x )/10000 + d_1) / 100\nlambda_t = (a_2 * x + b_2) / 100\ndelta = list(abs(mu_t-lambda_t))\ncrosses = list(map(delta.index, heapq.nsmallest(3, delta)))\n# For level\n# lambda_t = np.ones(len(x)) * (b_2 / 100)\n# crosses.append(200)\neqb = lambda_t[max(crosses)]",
        "detail": "illustration_plot.plot_curves_0",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_0",
        "description": "illustration_plot.plot_curves_0",
        "peekOfCode": "x = np.array(range(300))\nmu_t = ((a_1 * x**3 + b_1 * x**2 + c_1 * x )/10000 + d_1) / 100\nlambda_t = (a_2 * x + b_2) / 100\ndelta = list(abs(mu_t-lambda_t))\ncrosses = list(map(delta.index, heapq.nsmallest(3, delta)))\n# For level\n# lambda_t = np.ones(len(x)) * (b_2 / 100)\n# crosses.append(200)\neqb = lambda_t[max(crosses)]\nfor i in range(max(crosses), len(x)):",
        "detail": "illustration_plot.plot_curves_0",
        "documentation": {}
    },
    {
        "label": "mu_t",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_0",
        "description": "illustration_plot.plot_curves_0",
        "peekOfCode": "mu_t = ((a_1 * x**3 + b_1 * x**2 + c_1 * x )/10000 + d_1) / 100\nlambda_t = (a_2 * x + b_2) / 100\ndelta = list(abs(mu_t-lambda_t))\ncrosses = list(map(delta.index, heapq.nsmallest(3, delta)))\n# For level\n# lambda_t = np.ones(len(x)) * (b_2 / 100)\n# crosses.append(200)\neqb = lambda_t[max(crosses)]\nfor i in range(max(crosses), len(x)):\n    lambda_t[i] = eqb",
        "detail": "illustration_plot.plot_curves_0",
        "documentation": {}
    },
    {
        "label": "lambda_t",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_0",
        "description": "illustration_plot.plot_curves_0",
        "peekOfCode": "lambda_t = (a_2 * x + b_2) / 100\ndelta = list(abs(mu_t-lambda_t))\ncrosses = list(map(delta.index, heapq.nsmallest(3, delta)))\n# For level\n# lambda_t = np.ones(len(x)) * (b_2 / 100)\n# crosses.append(200)\neqb = lambda_t[max(crosses)]\nfor i in range(max(crosses), len(x)):\n    lambda_t[i] = eqb\n    mu_t[i] = eqb",
        "detail": "illustration_plot.plot_curves_0",
        "documentation": {}
    },
    {
        "label": "delta",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_0",
        "description": "illustration_plot.plot_curves_0",
        "peekOfCode": "delta = list(abs(mu_t-lambda_t))\ncrosses = list(map(delta.index, heapq.nsmallest(3, delta)))\n# For level\n# lambda_t = np.ones(len(x)) * (b_2 / 100)\n# crosses.append(200)\neqb = lambda_t[max(crosses)]\nfor i in range(max(crosses), len(x)):\n    lambda_t[i] = eqb\n    mu_t[i] = eqb\nplt.axis('off')",
        "detail": "illustration_plot.plot_curves_0",
        "documentation": {}
    },
    {
        "label": "crosses",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_0",
        "description": "illustration_plot.plot_curves_0",
        "peekOfCode": "crosses = list(map(delta.index, heapq.nsmallest(3, delta)))\n# For level\n# lambda_t = np.ones(len(x)) * (b_2 / 100)\n# crosses.append(200)\neqb = lambda_t[max(crosses)]\nfor i in range(max(crosses), len(x)):\n    lambda_t[i] = eqb\n    mu_t[i] = eqb\nplt.axis('off')\nplt.figure(figsize=(12, 8))",
        "detail": "illustration_plot.plot_curves_0",
        "documentation": {}
    },
    {
        "label": "eqb",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_0",
        "description": "illustration_plot.plot_curves_0",
        "peekOfCode": "eqb = lambda_t[max(crosses)]\nfor i in range(max(crosses), len(x)):\n    lambda_t[i] = eqb\n    mu_t[i] = eqb\nplt.axis('off')\nplt.figure(figsize=(12, 8))\nplt.plot(x, mu_t, label='mu(t)', color='r', linewidth=2.5)\nplt.plot(x, lambda_t, label='lambda(t)', color='b', linewidth=2.5)\nplt.xlim([0, max(crosses)])\n# plt.ylim([0, 40])",
        "detail": "illustration_plot.plot_curves_0",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_0",
        "description": "illustration_plot.plot_curves_0",
        "peekOfCode": "ax = plt.gca()\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['bottom'].set_visible(False)\nax.spines['left'].set_visible(False)\n# plt.legend()\nplt.xticks([])\nplt.yticks([])\nplt.savefig('fig/mu_lambda.png', dpi=200, transparent=True)\nplt.close()",
        "detail": "illustration_plot.plot_curves_0",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_0",
        "description": "illustration_plot.plot_curves_0",
        "peekOfCode": "ax = plt.gca()\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['bottom'].set_visible(False)\nax.spines['left'].set_visible(False)\nplt.savefig('fig/cumsum.png', dpi=200, transparent=True)\nplt.close()\nplt.axis('off')\nplt.figure(figsize=(12, 8))\nplt.plot(x, np.cumsum(lambda_t) - np.cumsum(mu_t), label='Q(t)', color='orange', linewidth=2.5)",
        "detail": "illustration_plot.plot_curves_0",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_0",
        "description": "illustration_plot.plot_curves_0",
        "peekOfCode": "ax = plt.gca()\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['bottom'].set_visible(False)\nax.spines['left'].set_visible(False)\nplt.savefig('fig/Q.png', dpi=200, transparent=True)\nplt.close()",
        "detail": "illustration_plot.plot_curves_0",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_2_quadratic_tf",
        "description": "illustration_plot.plot_curves_2_quadratic_tf",
        "peekOfCode": "x = np.array(range(300))\n# add a new parameter m\nm = [1 / 3, 1 / 2, 2 / 3, 1]\n# add pi_t function\ndata_list = []\nfor m_value in m:\n    # pi_t = -(x - 0) * (x - 300 * m_value) * (x - 300)\n    pi_t = (x - 0) * (x - 300 * m_value)\n    data_list.append(pi_t)\nmiddle_value = 80",
        "detail": "illustration_plot.plot_curves_2_quadratic_tf",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_2_quadratic_tf",
        "description": "illustration_plot.plot_curves_2_quadratic_tf",
        "peekOfCode": "m = [1 / 3, 1 / 2, 2 / 3, 1]\n# add pi_t function\ndata_list = []\nfor m_value in m:\n    # pi_t = -(x - 0) * (x - 300 * m_value) * (x - 300)\n    pi_t = (x - 0) * (x - 300 * m_value)\n    data_list.append(pi_t)\nmiddle_value = 80\nx1 = np.array(list(x[:middle_value]))\nx2 = np.array(list(x[middle_value:]))",
        "detail": "illustration_plot.plot_curves_2_quadratic_tf",
        "documentation": {}
    },
    {
        "label": "data_list",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_2_quadratic_tf",
        "description": "illustration_plot.plot_curves_2_quadratic_tf",
        "peekOfCode": "data_list = []\nfor m_value in m:\n    # pi_t = -(x - 0) * (x - 300 * m_value) * (x - 300)\n    pi_t = (x - 0) * (x - 300 * m_value)\n    data_list.append(pi_t)\nmiddle_value = 80\nx1 = np.array(list(x[:middle_value]))\nx2 = np.array(list(x[middle_value:]))\npi_1_t = 15 * (x1 - 0) * (x1 - middle_value)\npi_2_t = -0.5 * (x2 - middle_value) * (x2 - 300)",
        "detail": "illustration_plot.plot_curves_2_quadratic_tf",
        "documentation": {}
    },
    {
        "label": "middle_value",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_2_quadratic_tf",
        "description": "illustration_plot.plot_curves_2_quadratic_tf",
        "peekOfCode": "middle_value = 80\nx1 = np.array(list(x[:middle_value]))\nx2 = np.array(list(x[middle_value:]))\npi_1_t = 15 * (x1 - 0) * (x1 - middle_value)\npi_2_t = -0.5 * (x2 - middle_value) * (x2 - 300)\npi_t_total = np.concatenate((pi_1_t, pi_2_t))\nplt.figure(figsize=(12, 8))\nplt.plot(x, pi_t_total, color='b', linewidth=2.5)\nax = plt.gca()\nax.spines['top'].set_visible(False)",
        "detail": "illustration_plot.plot_curves_2_quadratic_tf",
        "documentation": {}
    },
    {
        "label": "x1",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_2_quadratic_tf",
        "description": "illustration_plot.plot_curves_2_quadratic_tf",
        "peekOfCode": "x1 = np.array(list(x[:middle_value]))\nx2 = np.array(list(x[middle_value:]))\npi_1_t = 15 * (x1 - 0) * (x1 - middle_value)\npi_2_t = -0.5 * (x2 - middle_value) * (x2 - 300)\npi_t_total = np.concatenate((pi_1_t, pi_2_t))\nplt.figure(figsize=(12, 8))\nplt.plot(x, pi_t_total, color='b', linewidth=2.5)\nax = plt.gca()\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)",
        "detail": "illustration_plot.plot_curves_2_quadratic_tf",
        "documentation": {}
    },
    {
        "label": "x2",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_2_quadratic_tf",
        "description": "illustration_plot.plot_curves_2_quadratic_tf",
        "peekOfCode": "x2 = np.array(list(x[middle_value:]))\npi_1_t = 15 * (x1 - 0) * (x1 - middle_value)\npi_2_t = -0.5 * (x2 - middle_value) * (x2 - 300)\npi_t_total = np.concatenate((pi_1_t, pi_2_t))\nplt.figure(figsize=(12, 8))\nplt.plot(x, pi_t_total, color='b', linewidth=2.5)\nax = plt.gca()\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['bottom'].set_visible(False)",
        "detail": "illustration_plot.plot_curves_2_quadratic_tf",
        "documentation": {}
    },
    {
        "label": "pi_1_t",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_2_quadratic_tf",
        "description": "illustration_plot.plot_curves_2_quadratic_tf",
        "peekOfCode": "pi_1_t = 15 * (x1 - 0) * (x1 - middle_value)\npi_2_t = -0.5 * (x2 - middle_value) * (x2 - 300)\npi_t_total = np.concatenate((pi_1_t, pi_2_t))\nplt.figure(figsize=(12, 8))\nplt.plot(x, pi_t_total, color='b', linewidth=2.5)\nax = plt.gca()\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['bottom'].set_visible(False)\nax.spines['left'].set_visible(False)",
        "detail": "illustration_plot.plot_curves_2_quadratic_tf",
        "documentation": {}
    },
    {
        "label": "pi_2_t",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_2_quadratic_tf",
        "description": "illustration_plot.plot_curves_2_quadratic_tf",
        "peekOfCode": "pi_2_t = -0.5 * (x2 - middle_value) * (x2 - 300)\npi_t_total = np.concatenate((pi_1_t, pi_2_t))\nplt.figure(figsize=(12, 8))\nplt.plot(x, pi_t_total, color='b', linewidth=2.5)\nax = plt.gca()\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['bottom'].set_visible(False)\nax.spines['left'].set_visible(False)\nplt.axis('off')",
        "detail": "illustration_plot.plot_curves_2_quadratic_tf",
        "documentation": {}
    },
    {
        "label": "pi_t_total",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_2_quadratic_tf",
        "description": "illustration_plot.plot_curves_2_quadratic_tf",
        "peekOfCode": "pi_t_total = np.concatenate((pi_1_t, pi_2_t))\nplt.figure(figsize=(12, 8))\nplt.plot(x, pi_t_total, color='b', linewidth=2.5)\nax = plt.gca()\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['bottom'].set_visible(False)\nax.spines['left'].set_visible(False)\nplt.axis('off')\nplt.savefig('fig/pi_combine_two.png', dpi=200, transparent=True)",
        "detail": "illustration_plot.plot_curves_2_quadratic_tf",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_2_quadratic_tf",
        "description": "illustration_plot.plot_curves_2_quadratic_tf",
        "peekOfCode": "ax = plt.gca()\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['bottom'].set_visible(False)\nax.spines['left'].set_visible(False)\nplt.axis('off')\nplt.savefig('fig/pi_combine_two.png', dpi=200, transparent=True)\nplt.show()\nplt.close()\n####  Cumulate sum of pi_1_t and pi_2_t",
        "detail": "illustration_plot.plot_curves_2_quadratic_tf",
        "documentation": {}
    },
    {
        "label": "pi_1_t_cumsum",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_2_quadratic_tf",
        "description": "illustration_plot.plot_curves_2_quadratic_tf",
        "peekOfCode": "pi_1_t_cumsum = np.cumsum(pi_1_t)\npi_2_t_cumsum = np.cumsum(pi_2_t) + pi_1_t_cumsum[-1]\npi_t_total_cumsum = np.concatenate((pi_1_t_cumsum, pi_2_t_cumsum))\nplt.figure(figsize=(12, 8))\nplt.plot(x, pi_t_total_cumsum, color='b', linewidth=2.5)\nax = plt.gca()\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['bottom'].set_visible(False)\nax.spines['left'].set_visible(False)",
        "detail": "illustration_plot.plot_curves_2_quadratic_tf",
        "documentation": {}
    },
    {
        "label": "pi_2_t_cumsum",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_2_quadratic_tf",
        "description": "illustration_plot.plot_curves_2_quadratic_tf",
        "peekOfCode": "pi_2_t_cumsum = np.cumsum(pi_2_t) + pi_1_t_cumsum[-1]\npi_t_total_cumsum = np.concatenate((pi_1_t_cumsum, pi_2_t_cumsum))\nplt.figure(figsize=(12, 8))\nplt.plot(x, pi_t_total_cumsum, color='b', linewidth=2.5)\nax = plt.gca()\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['bottom'].set_visible(False)\nax.spines['left'].set_visible(False)\nplt.axis('off')",
        "detail": "illustration_plot.plot_curves_2_quadratic_tf",
        "documentation": {}
    },
    {
        "label": "pi_t_total_cumsum",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_2_quadratic_tf",
        "description": "illustration_plot.plot_curves_2_quadratic_tf",
        "peekOfCode": "pi_t_total_cumsum = np.concatenate((pi_1_t_cumsum, pi_2_t_cumsum))\nplt.figure(figsize=(12, 8))\nplt.plot(x, pi_t_total_cumsum, color='b', linewidth=2.5)\nax = plt.gca()\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['bottom'].set_visible(False)\nax.spines['left'].set_visible(False)\nplt.axis('off')\nplt.savefig('fig/pi_combine_two_cumsum.png', dpi=200, transparent=True)",
        "detail": "illustration_plot.plot_curves_2_quadratic_tf",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_2_quadratic_tf",
        "description": "illustration_plot.plot_curves_2_quadratic_tf",
        "peekOfCode": "ax = plt.gca()\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['bottom'].set_visible(False)\nax.spines['left'].set_visible(False)\nplt.axis('off')\nplt.savefig('fig/pi_combine_two_cumsum.png', dpi=200, transparent=True)\nplt.show()\nplt.close()\n# plt.axis('off')",
        "detail": "illustration_plot.plot_curves_2_quadratic_tf",
        "documentation": {}
    },
    {
        "label": "a_1",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_cubic_xl",
        "description": "illustration_plot.plot_curves_cubic_xl",
        "peekOfCode": "a_1 = 1\nb_1 = -300\nc_1 = 20000\nd_1 = 50\na_2 = -0.1\nb_2 = d_1\nx = np.array(range(300))\nmu_t = ((a_1 * x**3 + b_1 * x**2 + c_1 * x) / 10000 + d_1) / 100\nlambda_t = (a_2 * x + b_2) / 100\n# add a new parameter m",
        "detail": "illustration_plot.plot_curves_cubic_xl",
        "documentation": {}
    },
    {
        "label": "b_1",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_cubic_xl",
        "description": "illustration_plot.plot_curves_cubic_xl",
        "peekOfCode": "b_1 = -300\nc_1 = 20000\nd_1 = 50\na_2 = -0.1\nb_2 = d_1\nx = np.array(range(300))\nmu_t = ((a_1 * x**3 + b_1 * x**2 + c_1 * x) / 10000 + d_1) / 100\nlambda_t = (a_2 * x + b_2) / 100\n# add a new parameter m\nm = [1 / 3, 1 / 2, 2 / 3, 1]",
        "detail": "illustration_plot.plot_curves_cubic_xl",
        "documentation": {}
    },
    {
        "label": "c_1",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_cubic_xl",
        "description": "illustration_plot.plot_curves_cubic_xl",
        "peekOfCode": "c_1 = 20000\nd_1 = 50\na_2 = -0.1\nb_2 = d_1\nx = np.array(range(300))\nmu_t = ((a_1 * x**3 + b_1 * x**2 + c_1 * x) / 10000 + d_1) / 100\nlambda_t = (a_2 * x + b_2) / 100\n# add a new parameter m\nm = [1 / 3, 1 / 2, 2 / 3, 1]\n# add pi_t function",
        "detail": "illustration_plot.plot_curves_cubic_xl",
        "documentation": {}
    },
    {
        "label": "d_1",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_cubic_xl",
        "description": "illustration_plot.plot_curves_cubic_xl",
        "peekOfCode": "d_1 = 50\na_2 = -0.1\nb_2 = d_1\nx = np.array(range(300))\nmu_t = ((a_1 * x**3 + b_1 * x**2 + c_1 * x) / 10000 + d_1) / 100\nlambda_t = (a_2 * x + b_2) / 100\n# add a new parameter m\nm = [1 / 3, 1 / 2, 2 / 3, 1]\n# add pi_t function\ndata_list = []",
        "detail": "illustration_plot.plot_curves_cubic_xl",
        "documentation": {}
    },
    {
        "label": "a_2",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_cubic_xl",
        "description": "illustration_plot.plot_curves_cubic_xl",
        "peekOfCode": "a_2 = -0.1\nb_2 = d_1\nx = np.array(range(300))\nmu_t = ((a_1 * x**3 + b_1 * x**2 + c_1 * x) / 10000 + d_1) / 100\nlambda_t = (a_2 * x + b_2) / 100\n# add a new parameter m\nm = [1 / 3, 1 / 2, 2 / 3, 1]\n# add pi_t function\ndata_list = []\nfor m_value in m:",
        "detail": "illustration_plot.plot_curves_cubic_xl",
        "documentation": {}
    },
    {
        "label": "b_2",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_cubic_xl",
        "description": "illustration_plot.plot_curves_cubic_xl",
        "peekOfCode": "b_2 = d_1\nx = np.array(range(300))\nmu_t = ((a_1 * x**3 + b_1 * x**2 + c_1 * x) / 10000 + d_1) / 100\nlambda_t = (a_2 * x + b_2) / 100\n# add a new parameter m\nm = [1 / 3, 1 / 2, 2 / 3, 1]\n# add pi_t function\ndata_list = []\nfor m_value in m:\n    pi_t = -(x - 0) * (x - 300 * m_value) * (x - 300)",
        "detail": "illustration_plot.plot_curves_cubic_xl",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_cubic_xl",
        "description": "illustration_plot.plot_curves_cubic_xl",
        "peekOfCode": "x = np.array(range(300))\nmu_t = ((a_1 * x**3 + b_1 * x**2 + c_1 * x) / 10000 + d_1) / 100\nlambda_t = (a_2 * x + b_2) / 100\n# add a new parameter m\nm = [1 / 3, 1 / 2, 2 / 3, 1]\n# add pi_t function\ndata_list = []\nfor m_value in m:\n    pi_t = -(x - 0) * (x - 300 * m_value) * (x - 300)\n    data_list.append(pi_t)",
        "detail": "illustration_plot.plot_curves_cubic_xl",
        "documentation": {}
    },
    {
        "label": "mu_t",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_cubic_xl",
        "description": "illustration_plot.plot_curves_cubic_xl",
        "peekOfCode": "mu_t = ((a_1 * x**3 + b_1 * x**2 + c_1 * x) / 10000 + d_1) / 100\nlambda_t = (a_2 * x + b_2) / 100\n# add a new parameter m\nm = [1 / 3, 1 / 2, 2 / 3, 1]\n# add pi_t function\ndata_list = []\nfor m_value in m:\n    pi_t = -(x - 0) * (x - 300 * m_value) * (x - 300)\n    data_list.append(pi_t)\ndelta = list(abs(mu_t - lambda_t))",
        "detail": "illustration_plot.plot_curves_cubic_xl",
        "documentation": {}
    },
    {
        "label": "lambda_t",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_cubic_xl",
        "description": "illustration_plot.plot_curves_cubic_xl",
        "peekOfCode": "lambda_t = (a_2 * x + b_2) / 100\n# add a new parameter m\nm = [1 / 3, 1 / 2, 2 / 3, 1]\n# add pi_t function\ndata_list = []\nfor m_value in m:\n    pi_t = -(x - 0) * (x - 300 * m_value) * (x - 300)\n    data_list.append(pi_t)\ndelta = list(abs(mu_t - lambda_t))\ncrosses = list(map(delta.index, heapq.nsmallest(3, delta)))",
        "detail": "illustration_plot.plot_curves_cubic_xl",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_cubic_xl",
        "description": "illustration_plot.plot_curves_cubic_xl",
        "peekOfCode": "m = [1 / 3, 1 / 2, 2 / 3, 1]\n# add pi_t function\ndata_list = []\nfor m_value in m:\n    pi_t = -(x - 0) * (x - 300 * m_value) * (x - 300)\n    data_list.append(pi_t)\ndelta = list(abs(mu_t - lambda_t))\ncrosses = list(map(delta.index, heapq.nsmallest(3, delta)))\n# For level\n# lambda_t = np.ones(len(x)) * (b_2 / 100)",
        "detail": "illustration_plot.plot_curves_cubic_xl",
        "documentation": {}
    },
    {
        "label": "data_list",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_cubic_xl",
        "description": "illustration_plot.plot_curves_cubic_xl",
        "peekOfCode": "data_list = []\nfor m_value in m:\n    pi_t = -(x - 0) * (x - 300 * m_value) * (x - 300)\n    data_list.append(pi_t)\ndelta = list(abs(mu_t - lambda_t))\ncrosses = list(map(delta.index, heapq.nsmallest(3, delta)))\n# For level\n# lambda_t = np.ones(len(x)) * (b_2 / 100)\n# crosses.append(200)\neqb = lambda_t[max(crosses)]",
        "detail": "illustration_plot.plot_curves_cubic_xl",
        "documentation": {}
    },
    {
        "label": "delta",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_cubic_xl",
        "description": "illustration_plot.plot_curves_cubic_xl",
        "peekOfCode": "delta = list(abs(mu_t - lambda_t))\ncrosses = list(map(delta.index, heapq.nsmallest(3, delta)))\n# For level\n# lambda_t = np.ones(len(x)) * (b_2 / 100)\n# crosses.append(200)\neqb = lambda_t[max(crosses)]\nfor i in range(max(crosses), len(x)):\n    lambda_t[i] = eqb\n    mu_t[i] = eqb\nplt.axis('off')",
        "detail": "illustration_plot.plot_curves_cubic_xl",
        "documentation": {}
    },
    {
        "label": "crosses",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_cubic_xl",
        "description": "illustration_plot.plot_curves_cubic_xl",
        "peekOfCode": "crosses = list(map(delta.index, heapq.nsmallest(3, delta)))\n# For level\n# lambda_t = np.ones(len(x)) * (b_2 / 100)\n# crosses.append(200)\neqb = lambda_t[max(crosses)]\nfor i in range(max(crosses), len(x)):\n    lambda_t[i] = eqb\n    mu_t[i] = eqb\nplt.axis('off')\nplt.figure(figsize=(12, 8))",
        "detail": "illustration_plot.plot_curves_cubic_xl",
        "documentation": {}
    },
    {
        "label": "eqb",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_cubic_xl",
        "description": "illustration_plot.plot_curves_cubic_xl",
        "peekOfCode": "eqb = lambda_t[max(crosses)]\nfor i in range(max(crosses), len(x)):\n    lambda_t[i] = eqb\n    mu_t[i] = eqb\nplt.axis('off')\nplt.figure(figsize=(12, 8))\n# plt.plot(x, mu_t, label='mu(t)', color='r', linewidth=2.5)\n# plt.plot(x, lambda_t, label='lambda(t)', color='b', linewidth=2.5)\nplt.plot(x, data_list[0], label='m = 1/3', color='r', linewidth=2.5)\nplt.plot(x, data_list[1], label='m = 1/2', color='g', linewidth=2.5)",
        "detail": "illustration_plot.plot_curves_cubic_xl",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_cubic_xl",
        "description": "illustration_plot.plot_curves_cubic_xl",
        "peekOfCode": "ax = plt.gca()\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['bottom'].set_visible(False)\nax.spines['left'].set_visible(False)\n# plt.legend()\nplt.xticks([])\nplt.yticks([])\nplt.legend(framealpha=0, fontsize=20, loc='lower right')\nplt.savefig('fig/pi_t_all.png', dpi=200, transparent=True)",
        "detail": "illustration_plot.plot_curves_cubic_xl",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_cubic_xl",
        "description": "illustration_plot.plot_curves_cubic_xl",
        "peekOfCode": "ax = plt.gca()\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['bottom'].set_visible(False)\nax.spines['left'].set_visible(False)\n# plt.legend(framealpha=0, loc='upper right')\n# plt.savefig('fig/pi_t_cumsum.png', dpi=200, transparent=True)\nplt.savefig('fig/pi_t_cumsum_all.png', dpi=200, transparent=True)\nplt.close()\n#",
        "detail": "illustration_plot.plot_curves_cubic_xl",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_quadratic_tf",
        "description": "illustration_plot.plot_curves_quadratic_tf",
        "peekOfCode": "x = np.array(range(300))\n# add a new parameter m\nm = [1 / 3, 1 / 2, 2 / 3, 1]\n# add pi_t function\ndata_list = []\nfor m_value in m:\n    # pi_t = -(x - 0) * (x - 300 * m_value) * (x - 300)\n    pi_t = (x - 0) * (x - 300 * m_value)\n    data_list.append(pi_t)\nplt.axis('off')",
        "detail": "illustration_plot.plot_curves_quadratic_tf",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_quadratic_tf",
        "description": "illustration_plot.plot_curves_quadratic_tf",
        "peekOfCode": "m = [1 / 3, 1 / 2, 2 / 3, 1]\n# add pi_t function\ndata_list = []\nfor m_value in m:\n    # pi_t = -(x - 0) * (x - 300 * m_value) * (x - 300)\n    pi_t = (x - 0) * (x - 300 * m_value)\n    data_list.append(pi_t)\nplt.axis('off')\nplt.figure(figsize=(12, 8))\nplt.plot(x, data_list[0], label='m = 1/3', color='r', linewidth=2.5)",
        "detail": "illustration_plot.plot_curves_quadratic_tf",
        "documentation": {}
    },
    {
        "label": "data_list",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_quadratic_tf",
        "description": "illustration_plot.plot_curves_quadratic_tf",
        "peekOfCode": "data_list = []\nfor m_value in m:\n    # pi_t = -(x - 0) * (x - 300 * m_value) * (x - 300)\n    pi_t = (x - 0) * (x - 300 * m_value)\n    data_list.append(pi_t)\nplt.axis('off')\nplt.figure(figsize=(12, 8))\nplt.plot(x, data_list[0], label='m = 1/3', color='r', linewidth=2.5)\nplt.plot(x, data_list[1], label='m = 1/2', color='g', linewidth=2.5)\nplt.plot(x, data_list[2], label='m = 2/3', color='b', linewidth=2.5)",
        "detail": "illustration_plot.plot_curves_quadratic_tf",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_quadratic_tf",
        "description": "illustration_plot.plot_curves_quadratic_tf",
        "peekOfCode": "ax = plt.gca()\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['bottom'].set_visible(False)\nax.spines['left'].set_visible(False)\n# plt.legend()\nplt.xticks([])\nplt.yticks([])\nplt.legend(framealpha=0)\nplt.savefig('fig/pi_t_all.png', dpi=200, transparent=True)",
        "detail": "illustration_plot.plot_curves_quadratic_tf",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "illustration_plot.plot_curves_quadratic_tf",
        "description": "illustration_plot.plot_curves_quadratic_tf",
        "peekOfCode": "ax = plt.gca()\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['bottom'].set_visible(False)\nax.spines['left'].set_visible(False)\n# plt.legend(framealpha=0, loc='upper right')\n# plt.savefig('fig/pi_t_cumsum.png', dpi=200, transparent=True)\nplt.savefig('fig/pi_t_cumsum_all.png', dpi=200, transparent=True)\nplt.close()\n#",
        "detail": "illustration_plot.plot_curves_quadratic_tf",
        "documentation": {}
    },
    {
        "label": "find_ts",
        "kind": 2,
        "importPath": "find_t_Feb_10",
        "description": "find_t_Feb_10",
        "peekOfCode": "def find_ts(df_for_t, state):\n    t0_time_window = 100\n    t3_time_window = 120  # First x days chunk to find t1\n    t4_time_window = 60  # Time window to get std\n    t4_std_threshhold = 1.2\n    df_for_t['delta'] = df_for_t[f'{state}_rolling'] - df_for_t[f'{state}_rolling'].shift(1)\n    df_for_t['delta_2'] = df_for_t[f'delta'] - df_for_t[f'delta'].shift(1)\n    df_for_t['delta_3'] = df_for_t[f'delta_2'] - df_for_t[f'delta_2'].shift(1)\n    # Get t0\n    df_for_t['sign_change'] = df_for_t[f'{state}_rolling'] * df_for_t[f'{state}_rolling'].shift(1)",
        "detail": "find_t_Feb_10",
        "documentation": {}
    },
    {
        "label": "path_global",
        "kind": 5,
        "importPath": "find_t_Feb_10",
        "description": "find_t_Feb_10",
        "peekOfCode": "path_global = \"./data/Region_Mobility_Report_CSVs/Global_Mobility_Report.csv\"\npath_origin = './data/Region_Mobility_Report_CSVs/2020_US_Mobility_Report.csv'\ndf = pd.read_csv(path_global,\n                 usecols=['sub_region_1', 'date', 'transit_stations_percent_change_from_baseline'])\ndf.columns = ['state', 'date', 'change_rate']\ndf['date'] = df.apply(lambda x: x['date'][-5:], axis=1)\ndf['change_rate'].isnull().sum()\n# # Check missing rate\n# print(\"DATA MISSING RATE\\n\")\n# print(f\"Overall : {df['change_rate'].isnull().sum()/len(df)}\\n\")",
        "detail": "find_t_Feb_10",
        "documentation": {}
    },
    {
        "label": "path_origin",
        "kind": 5,
        "importPath": "find_t_Feb_10",
        "description": "find_t_Feb_10",
        "peekOfCode": "path_origin = './data/Region_Mobility_Report_CSVs/2020_US_Mobility_Report.csv'\ndf = pd.read_csv(path_global,\n                 usecols=['sub_region_1', 'date', 'transit_stations_percent_change_from_baseline'])\ndf.columns = ['state', 'date', 'change_rate']\ndf['date'] = df.apply(lambda x: x['date'][-5:], axis=1)\ndf['change_rate'].isnull().sum()\n# # Check missing rate\n# print(\"DATA MISSING RATE\\n\")\n# print(f\"Overall : {df['change_rate'].isnull().sum()/len(df)}\\n\")\n# for state, state_df in df.groupby('state'):",
        "detail": "find_t_Feb_10",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "find_t_Feb_10",
        "description": "find_t_Feb_10",
        "peekOfCode": "df = pd.read_csv(path_global,\n                 usecols=['sub_region_1', 'date', 'transit_stations_percent_change_from_baseline'])\ndf.columns = ['state', 'date', 'change_rate']\ndf['date'] = df.apply(lambda x: x['date'][-5:], axis=1)\ndf['change_rate'].isnull().sum()\n# # Check missing rate\n# print(\"DATA MISSING RATE\\n\")\n# print(f\"Overall : {df['change_rate'].isnull().sum()/len(df)}\\n\")\n# for state, state_df in df.groupby('state'):\n#     nan_num = state_df['change_rate'].isnull().sum()",
        "detail": "find_t_Feb_10",
        "documentation": {}
    },
    {
        "label": "df.columns",
        "kind": 5,
        "importPath": "find_t_Feb_10",
        "description": "find_t_Feb_10",
        "peekOfCode": "df.columns = ['state', 'date', 'change_rate']\ndf['date'] = df.apply(lambda x: x['date'][-5:], axis=1)\ndf['change_rate'].isnull().sum()\n# # Check missing rate\n# print(\"DATA MISSING RATE\\n\")\n# print(f\"Overall : {df['change_rate'].isnull().sum()/len(df)}\\n\")\n# for state, state_df in df.groupby('state'):\n#     nan_num = state_df['change_rate'].isnull().sum()\n#     data_len = len(state_df)\n#     missing_rate = str(nan_num / data_len * 100)[:5] + \"%\"",
        "detail": "find_t_Feb_10",
        "documentation": {}
    },
    {
        "label": "df['date']",
        "kind": 5,
        "importPath": "find_t_Feb_10",
        "description": "find_t_Feb_10",
        "peekOfCode": "df['date'] = df.apply(lambda x: x['date'][-5:], axis=1)\ndf['change_rate'].isnull().sum()\n# # Check missing rate\n# print(\"DATA MISSING RATE\\n\")\n# print(f\"Overall : {df['change_rate'].isnull().sum()/len(df)}\\n\")\n# for state, state_df in df.groupby('state'):\n#     nan_num = state_df['change_rate'].isnull().sum()\n#     data_len = len(state_df)\n#     missing_rate = str(nan_num / data_len * 100)[:5] + \"%\"\n#     print(f'{state} : {missing_rate} ({nan_num}/{data_len})')",
        "detail": "find_t_Feb_10",
        "documentation": {}
    },
    {
        "label": "df_full",
        "kind": 5,
        "importPath": "find_t_Feb_10",
        "description": "find_t_Feb_10",
        "peekOfCode": "df_full = df.dropna(axis=0, how='any')\nstate_date = pd.pivot_table(df_full, index='date', columns='state', values='change_rate', aggfunc=np.mean)\nUS_avg = []\nfor date_pt, date_df in df_full.groupby('date'):\n    US_avg.append(date_df['change_rate'].mean())\nstate_date['US'] = US_avg\nstate_date['US_rolling'] = state_date['US'].rolling(window=7).mean()\n# for state in state_date.columns:\nfor state in ['US', 'Arizona']:\n    state_date[f'{state}_rolling'] = state_date[f'{state}'].rolling(window=7).mean()",
        "detail": "find_t_Feb_10",
        "documentation": {}
    },
    {
        "label": "state_date",
        "kind": 5,
        "importPath": "find_t_Feb_10",
        "description": "find_t_Feb_10",
        "peekOfCode": "state_date = pd.pivot_table(df_full, index='date', columns='state', values='change_rate', aggfunc=np.mean)\nUS_avg = []\nfor date_pt, date_df in df_full.groupby('date'):\n    US_avg.append(date_df['change_rate'].mean())\nstate_date['US'] = US_avg\nstate_date['US_rolling'] = state_date['US'].rolling(window=7).mean()\n# for state in state_date.columns:\nfor state in ['US', 'Arizona']:\n    state_date[f'{state}_rolling'] = state_date[f'{state}'].rolling(window=7).mean()\n    state_date['index_num'] = np.array(range(len(state_date)))",
        "detail": "find_t_Feb_10",
        "documentation": {}
    },
    {
        "label": "US_avg",
        "kind": 5,
        "importPath": "find_t_Feb_10",
        "description": "find_t_Feb_10",
        "peekOfCode": "US_avg = []\nfor date_pt, date_df in df_full.groupby('date'):\n    US_avg.append(date_df['change_rate'].mean())\nstate_date['US'] = US_avg\nstate_date['US_rolling'] = state_date['US'].rolling(window=7).mean()\n# for state in state_date.columns:\nfor state in ['US', 'Arizona']:\n    state_date[f'{state}_rolling'] = state_date[f'{state}'].rolling(window=7).mean()\n    state_date['index_num'] = np.array(range(len(state_date)))\n    plt.figure(figsize=(12, 8))",
        "detail": "find_t_Feb_10",
        "documentation": {}
    },
    {
        "label": "state_date['US']",
        "kind": 5,
        "importPath": "find_t_Feb_10",
        "description": "find_t_Feb_10",
        "peekOfCode": "state_date['US'] = US_avg\nstate_date['US_rolling'] = state_date['US'].rolling(window=7).mean()\n# for state in state_date.columns:\nfor state in ['US', 'Arizona']:\n    state_date[f'{state}_rolling'] = state_date[f'{state}'].rolling(window=7).mean()\n    state_date['index_num'] = np.array(range(len(state_date)))\n    plt.figure(figsize=(12, 8))\n    if state != 'US':\n        plt.plot(state_date[f'{state}_rolling'], label=f'{state}', color='orange')\n        plt.plot(state_date[f'{state}'], alpha=0.1, color='orange')",
        "detail": "find_t_Feb_10",
        "documentation": {}
    },
    {
        "label": "state_date['US_rolling']",
        "kind": 5,
        "importPath": "find_t_Feb_10",
        "description": "find_t_Feb_10",
        "peekOfCode": "state_date['US_rolling'] = state_date['US'].rolling(window=7).mean()\n# for state in state_date.columns:\nfor state in ['US', 'Arizona']:\n    state_date[f'{state}_rolling'] = state_date[f'{state}'].rolling(window=7).mean()\n    state_date['index_num'] = np.array(range(len(state_date)))\n    plt.figure(figsize=(12, 8))\n    if state != 'US':\n        plt.plot(state_date[f'{state}_rolling'], label=f'{state}', color='orange')\n        plt.plot(state_date[f'{state}'], alpha=0.1, color='orange')\n    plt.plot(state_date['US_rolling'], label='US', color='b')",
        "detail": "find_t_Feb_10",
        "documentation": {}
    },
    {
        "label": "generate_standard_data",
        "kind": 2,
        "importPath": "find_t_Feb_10_xl",
        "description": "find_t_Feb_10_xl",
        "peekOfCode": "def generate_standard_data(path_mobility_report: str, mobility_category: str = \"\", selected_year=2020, isSave2CSV=True) -> list:\n    if not mobility_category:\n        raise ValueError(\"Please select a mobility category\")\n    if isinstance(mobility_category, str):\n        mobility_category = [mobility_category]\n    # read global mobility report data\n    df_global = pd.read_csv(path_mobility_report,\n                            usecols=['country_region', 'sub_region_1', 'date'] + mobility_category)\n    # get US data\n    df_us_all_years = df_global[df_global['country_region'] == 'United States']",
        "detail": "find_t_Feb_10_xl",
        "documentation": {}
    },
    {
        "label": "find_ts",
        "kind": 2,
        "importPath": "find_t_Feb_10_xl",
        "description": "find_t_Feb_10_xl",
        "peekOfCode": "def find_ts(df_for_t: pd.DataFrame, state: str) -> dict:\n    # create a new column to store selected state's rolling mean under certain time window\n    df_for_t[f'{state}_rolling'] = df_for_t[f'{state}'].rolling(\n        window=7).mean()\n    # create a new column to store index number\n    df_for_t['index_num'] = np.array(range(len(df_for_t)))\n    t0_time_window = 100\n    t3_time_window = 120  # First x days chunk to find t1\n    t4_time_window = 60   # Time window to get std\n    t4_std_threshold = 1.2",
        "detail": "find_t_Feb_10_xl",
        "documentation": {}
    },
    {
        "label": "generate_plot",
        "kind": 2,
        "importPath": "find_t_Feb_10_xl",
        "description": "find_t_Feb_10_xl",
        "peekOfCode": "def generate_plot(df_change_rate_by_date: pd.DataFrame, state_list: list = [\"US\"], isSave2png=False) -> plt:\n    # create an empty list to store all T\n    Time_list = []\n    # reformat month_day\n    df_change_rate_by_date['month_day'] = pd.to_datetime(df_change_rate_by_date['date']).apply(\n        lambda x: x.strftime('%m-%d'))\n    # for state in df_change_rate_by_date.columns:\n    for state in state_list:\n        print(\"Preparing Ts for state: \", state)\n        # create a new column to store selected state's rolling mean under certain time window",
        "detail": "find_t_Feb_10_xl",
        "documentation": {}
    }
]